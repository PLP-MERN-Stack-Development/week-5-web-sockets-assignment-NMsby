name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      - name: 📦 Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: 📦 Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: 🔍 Lint server code
        working-directory: ./server
        run: npm run lint || true

      - name: 🔍 Lint client code
        working-directory: ./client
        run: npm run lint

      - name: 🧪 Run server tests
        working-directory: ./server
        run: npm test || true

      - name: 🧪 Run client tests
        working-directory: ./client
        run: npm test || true

  build:
    name: 🏗️ Build Application
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: 📦 Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: 🏗️ Build client
        working-directory: ./client
        run: npm run build
        env:
          VITE_SOCKET_URL: ${{ secrets.VITE_SOCKET_URL || 'http://localhost:5000' }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist/
          retention-days: 30

  docker:
    name: 🐳 Build & Push Docker Image
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 🚀 Deploy to Production
    needs: [test, build, docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: | 
            cd /opt/socketio-chat
            git pull origin main
            docker-compose down
            docker-compose pull
            docker-compose up -d
            docker system prune -f

      - name: 🔍 Health check
        run: |
          sleep 30
          curl -f ${{ secrets.APP_URL }}/api/health || exit 1

  notify:
    name: 📢 Notify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📢 Deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow